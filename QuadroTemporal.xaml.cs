namespace Leben;public partial class MainPage : ContentPage{	public MainPage()	{		InitializeComponent();		string directórioRaíz = "D:\\EXT\\Desenvolvimento\\Leben\\Dado";		List<string> directórios = Directory.EnumerateDirectories(directórioRaíz).ToList();        int médiaDaGrade = (int)Math.Ceiling((decimal)directórios.Count / 2);        int linhas = médiaDaGrade;        int columnas = médiaDaGrade;                Grid QuadroTemporal = new Grid();        QuadroTemporal.BackgroundColor = Colors.White;        for (int i = 0; i < linhas; i++)        {            RowDefinition linha = new RowDefinition();            linha.Height = GridLength.Star;            QuadroTemporal.AddRowDefinition(linha);        }        for (int i = 0; i < columnas; i++)         {            ColumnDefinition columna = new ColumnDefinition();            columna.Width = GridLength.Star;            QuadroTemporal.AddColumnDefinition(columna);        }        int linhaActual = 0;        int columnaActual = 0;        foreach (var directório in directórios)        {            Frame período = new Frame();            período.Background = new LinearGradientBrush([                new GradientStop(Color.FromRgb(200, 0, 0), 0),                new GradientStop(Color.FromRgb(0, 0, 200), 1)            ]);            TapGestureRecognizer tique = new TapGestureRecognizer();            tique.Tapped += (s, e) =>            {                período.Animate(                name: "MudaFundo",                animation: new Animation(v => ((LinearGradientBrush)período.Background).GradientStops[0].Offset = (float)v, 0, 1, Easing.Default),                rate: 8,                length: 500,                easing: Easing.Linear,                finished: null,                repeat: () => false                );            };            período.GestureRecognizers.Add(tique);            período.CornerRadius = 0;            período.Padding = 0;            período.Margin = 0;            QuadroTemporal.Add(período, linhaActual, columnaActual);            if (columnaActual != columnas) columnaActual++;            else            {                if (linhaActual > linhas) linhaActual = 0;                columnaActual = 0;            }        }        Contentor.Content = QuadroTemporal;    }}